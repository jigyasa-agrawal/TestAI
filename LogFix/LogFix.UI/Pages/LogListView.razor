@using Microsoft.JSInterop
@inject IJSRuntime JS
@using LogFix.UI.Pages

<style>
    .log-table th {
        position: sticky;
        top: 0;
        background: #f8f9fa;
        z-index: 2;
    }
    .log-table tbody tr:hover {
        background: #e9ecef;
        transition: background 0.2s;
    }
    .badge {
        font-size: 1rem;
        padding: 0.5em 1em;
        border-radius: 1em;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 0.5em;
    }
    .badge .bi {
        font-size: 1.2em;
    }
    .filter-select {
        min-width: 120px;
        border-radius: 8px;
        border: 1px solid #007bff;
        background: #f8f9fa;
        font-weight: 500;
        color: #007bff;
    }
</style>

<div>
    <div class="mb-2 d-flex align-items-center gap-2">
        <label class="fw-bold">Filter:</label>
        <select @bind="SelectedFilter" class="filter-select">
            <option value="all">All</option>
            <option value="error">Error</option>
            <option value="warning">Warning</option>
            <option value="info">Info</option>
        </select>
    </div>
    <div style="max-height:400px;overflow-y:auto;">
        <table class="table table-striped table-hover log-table">
            <thead>
                <tr>
                    <th>Error Title</th>
                    <th>Description</th>
                    <th>Count</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var group in GroupedEntries)
                {
                    <tr>
                        <td>@group.Key</td>
                        <td>@group.First().Message</td>
                        <td>@group.Count()</td>
                        <td>
                            <button class="btn btn-outline-primary btn-sm d-flex align-items-center gap-1" @onclick="() => ProcessLogGroup(group.Key)">
                                <span class="bi bi-gear"></span> Process
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter] public List<LogFileUpload.LogEntry> LogEntries { get; set; } = new();
    private string SelectedFilter = "all";
    private IEnumerable<IGrouping<string, LogFileUpload.LogEntry>> GroupedEntries =>
        LogEntries
            .Where(e => SelectedFilter == "all" || (e.Level?.ToLower() ?? "info") == SelectedFilter)
            .GroupBy(e => e.Title ?? "Unknown");

    private async void ProcessLogGroup(string title)
    {
        var id = Guid.NewGuid(); // Simulate unique id for the group
        var url = $"/process/{id}?title={Uri.EscapeDataString(title)}";
        await JS.InvokeVoidAsync("window.open", url, "_blank");
    }
}
