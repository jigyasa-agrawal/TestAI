@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject HttpClient Http
@using LogFix.UI.Pages

<style>
    .log-table th {
        position: sticky;
        top: 0;
        background: #f8f9fa;
        color: #212529;
        z-index: 2;
    }

    .log-table tbody tr:hover {
        background: #e9ecef;
        transition: background 0.2s;
    }

    .badge {
        font-size: 1rem;
        padding: 0.5em 1em;
        border-radius: 1em;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 0.5em;
        background: #f8f9fa;
        color: #007bff;
    }

        .badge .bi {
            font-size: 1.2em;
        }

    .filter-select {
        min-width: 120px;
        border-radius: 8px;
        border: 1px solid #007bff;
        background: #f8f9fa;
        font-weight: 500;
        color: #007bff;
    }
    /* Modal styles */
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.4);
        z-index: 1050;
    }

    .modal-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.18);
        z-index: 1060;
        min-width: 350px;
        width: 60vw;
        max-width: 60vw;
        max-height: 60vh;
        overflow-y: auto;
        color: #212529;
    }

    .modal-header {
        padding: 1rem;
        border-bottom: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #f8f9fa;
        color: #212529;
    }

    .modal-body {
        padding: 1rem;
        background: #fff;
        color: #212529;
    }

    .btn-outline-primary {
        color: #007bff;
        border-color: #007bff;
        background: #fff;
    }

        .btn-outline-primary:hover {
            background: #007bff;
            color: #fff;
            border-color: #007bff;
        }

    .btn-close {
        color: #212529;
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .card {
        background: #fff;
        color: #212529;
        border: 1px solid #eee;
    }

    .list-group-item {
        background: #f8f9fa;
        color: #212529;
        border-color: #eee;
    }
</style>

<div>
    <div class="mb-2 d-flex align-items-center gap-2">
        <label class="fw-bold">Filter:</label>
        <select @bind="SelectedFilter" class="filter-select">
            <option value="all">All</option>
            <option value="information">Information</option>
            <option value="error">Error</option>
            <option value="warning">Warning</option>
            <option value="info">Info</option>
        </select>
    </div>
    <div style="max-height:400px;overflow-y:auto;">
        <table class="table table-striped table-hover log-table">
            <thead>
                <tr>
                    <th>Message</th>
                    <th>Count</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var group in GroupedEntries)
                {
                    <tr>
                        <td>@group.Key</td>
                        <td>@group.Count()</td>
                        <td>
                            <button class="btn btn-outline-primary btn-sm d-flex align-items-center gap-1" @onclick="() => ShowGroupDetailsAsync(group)">
                                <span class="bi bi-gear"></span> Process
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (ShowModal && SelectedGroup != null)
    {
        <div class="modal-backdrop" @onclick="CloseModal"></div>
        <div class="modal-dialog">
            <div class="modal-header">
                <strong>Details for Message:</strong> @SelectedGroup.Key
                <button class="btn btn-sm btn-close" @onclick="CloseModal">&times;</button>
            </div>
            <div class="modal-body">
                <ul class="list-group">
                    @{
                        var entry = SelectedGroup.FirstOrDefault();
                        if (entry != null)
                        {
                            if (entry.CustomError)
                            {
                                <div class="mt-3">
                                    <strong>@entry.Action</strong>
                                </div>
                            }
                            else
                            {
                                <li class="list-group-item">
                                    <div><strong>Level:</strong> @entry.Level</div>
                                    <div><strong>Timestamp:</strong> @entry.Timestamp</div>
                                    <div><strong>EventId:</strong> @entry.Title</div>
                                    <div><strong>Custom Error:</strong> @entry.CustomError</div>
                                    <div><strong>StackTrace:</strong> @entry.StackTrace</div>
                                </li>
                            }
                        }                       
                        if (ApiResponse != null)
                        {
                            <div class="mt-3 aleert alert-info">@ApiResponse</div>
                        }
                    }

                </ul>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public List<LogFileUpload.LogEntry> LogEntries { get; set; } = new();
    private string SelectedFilter = "all";
    private IEnumerable<IGrouping<string, LogFileUpload.LogEntry>> GroupedEntries =>
        LogEntries
            .Where(e => SelectedFilter == "all" || (e.Level?.ToLower() ?? "information") == SelectedFilter)
            .GroupBy(e => e.Message ?? "Unknown");

    private IGrouping<string, LogFileUpload.LogEntry>? SelectedGroup;
    private bool ShowModal = false;
    private string ApiResponse = "";

    private void ShowGroupDetailsAsync(IGrouping<string, LogFileUpload.LogEntry> group)
    {

        SelectedGroup = group;
        ShowModal = true;
        ApiResponse = "";

        ApiResponse = "This message sent to the AI for processing...";
        StateHasChanged();
    }

    private void FixThieIssue(LogFileUpload.LogEntry entry)
    {

        ApiResponse = "Action is getting Processed...";
        StateHasChanged();
    }

    private void CloseModal()
    {
        ShowModal = false;
        SelectedGroup = null;
        ApiResponse = "";
    }
}
