@using Microsoft.JSInterop
@inject IJSRuntime JS
@using LogFix.UI.Pages

<style>
    .log-table th {
        position: sticky;
        top: 0;
        background: #f8f9fa;
        z-index: 2;
    }

    .log-table tbody tr:hover {
        background: #e9ecef;
        transition: background 0.2s;
    }

    .badge {
        font-size: 1rem;
        padding: 0.5em 1em;
        border-radius: 1em;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 0.5em;
    }

        .badge .bi {
            font-size: 1.2em;
        }

    .filter-select {
        min-width: 120px;
        border-radius: 8px;
        border: 1px solid #007bff;
        background: #f8f9fa;
        font-weight: 500;
        color: #007bff;
    }
</style>

<div>
    <div class="mb-2 d-flex align-items-center gap-2">
        <label class="fw-bold">Filter:</label>
        <select @bind="SelectedFilter" class="filter-select">
            <option value="all">All</option>
            <option value="error">Error</option>
            <option value="warning">Warning</option>
            <option value="info">Info</option>
        </select>
    </div>
    <div style="max-height:400px;overflow-y:auto;">
        <table class="table table-striped table-hover log-table">
            <thead>
                <tr>
                    <th>Level</th>
                    <th>Message</th>
                    <th>Timestamp</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entry in FilteredEntries)
                {
                    <tr>
                        <td>@(RenderLevelBadge(entry.Level))</td>
                        <td>@entry.Message</td>
                        <td>@entry.Timestamp</td>
                        <td>
                            <button class="btn btn-outline-primary btn-sm d-flex align-items-center gap-1" @onclick="() => ProcessLog(entry)">
                                <span class="bi bi-gear"></span> Process
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter] public List<LogFileUpload.LogEntry> LogEntries { get; set; } = new();
    private string SelectedFilter = "all";
    private IEnumerable<LogFileUpload.LogEntry> FilteredEntries => LogEntries.Where(e => SelectedFilter == "all" || (e.Level?.ToLower() ?? "info") == SelectedFilter);

    private RenderFragment RenderLevelBadge(string? level) => builder =>
    {
        var (color, icon) = level?.ToLower() switch
        {
            "error" => ("danger", "bi-exclamation-octagon-fill"),
            "warning" => ("warning", "bi-exclamation-triangle-fill"),
            "info" => ("primary", "bi-info-circle-fill"),
            _ => ("secondary", "bi-question-circle-fill")
        };
        builder.OpenElement(0, "span");
        builder.AddAttribute(1, "class", $"badge bg-{color}");
        builder.OpenElement(2, "span");
        builder.AddAttribute(3, "class", $"bi {icon}");
        builder.CloseElement();
        builder.AddContent(4, level ?? "info");
        builder.CloseElement();
    };

    private async void ProcessLog(LogFileUpload.LogEntry entry)
    {
        var id = Guid.NewGuid(); // Simulate unique id
        var url = $"/process/{id}";
        await JS.InvokeVoidAsync("window.open", url, "_blank");
    }
}
